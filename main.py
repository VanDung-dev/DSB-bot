import asyncio
import logging
import os
import sys
from typing import List

import colorlog
import discord
from discord.ext import commands
from dotenv import load_dotenv

from cogs.assistant import Assistant
from cogs.help import Help
from cogs.image import ImageSearch
from cogs.moderation import Moderation
from cogs.music import MusicSearch
from cogs.welcome import Welcome
from cogs.speak import Speaking

from slash_setup import initialize_slash_commands


# Ki·ªÉm tra phi√™n b·∫£n Python t·ªëi thi·ªÉu
if sys.version_info < (3, 11):
    print("Y√™u c·∫ßu Python 3.11 tr·ªü l√™n.")
    sys.exit(1)

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# C·∫•u h√¨nh logging v·ªõi m√†u s·∫Øc
LOG_FORMAT = "%(log_color)s[%(asctime)s] [%(levelname)s] %(name)s: %(message)s"
LOG_DATE = "%Y-%m-%d %H:%M:%S"
LOG_COLORS = {
    "DEBUG": "cyan",
    "INFO": "green",
    "WARNING": "yellow",
    "ERROR": "red",
    "CRITICAL": "bold_red",
}

# Thi·∫øt l·∫≠p handler cho terminal
stream_handler = colorlog.StreamHandler()
stream_handler.setFormatter(
    colorlog.ColoredFormatter(LOG_FORMAT, datefmt=LOG_DATE, log_colors=LOG_COLORS)
)

# C·∫•u h√¨nh root logger
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logger.addHandler(stream_handler)

# Thi·∫øt l·∫≠p intents cho bot
intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.members = True

# Kh·ªüi t·∫°o bot v·ªõi intents
bot = commands.Bot(command_prefix="", intents=intents, help_command=None)


@bot.event
async def on_ready() -> None:
    """S·ª± ki·ªán khi bot s·∫µn s√†ng ho·∫°t ƒë·ªông."""
    logger.info(f"ü§ñ Bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng: {bot.user} (ID: {bot.user.id})")
    # Kh·ªüi t·∫°o l·ªánh slash
    slash_setup = await initialize_slash_commands(bot)
    logger.info("‚úÖ ƒê√£ kh·ªüi t·∫°o slash commands")


async def setup_cogs() -> None:
    """ƒêƒÉng k√Ω c√°c cog cho bot."""
    cogs: List[commands.Cog] = [
        MusicSearch(bot),
        Help(bot),
        Assistant(bot),
        Welcome(bot),
        ImageSearch(bot),
        Moderation(bot),
        Speaking(bot),
    ]
    for cog in cogs:
        try:
            await bot.add_cog(cog)
            logger.info(f"‚úÖ ƒê√£ ƒëƒÉng k√Ω cog: {cog.__class__.__name__}")
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi ƒëƒÉng k√Ω cog {cog.__class__.__name__}: {e}")


async def main() -> None:
    """H√†m ch√≠nh ƒë·ªÉ kh·ªüi ƒë·ªông bot."""
    try:
        await setup_cogs()
        discord_token = os.getenv("KEY_DISCORD")
        if not discord_token:
            logger.error("‚ùå KEY_DISCORD kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p trong bi·∫øn m√¥i tr∆∞·ªùng")
            return
        await bot.start(discord_token)
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi kh·ªüi ƒë·ªông bot: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
import asyncio
import logging
import os
import sys
from typing import List

import colorlog
import discord
from discord.ext import commands
from dotenv import load_dotenv

from cogs.assistant import Assistant
from cogs.help import Help
from cogs.image import ImageSearch
from cogs.moderation import Moderation
from cogs.music import MusicSearch
from cogs.welcome import Welcome
from cogs.speak import Speaking

from slash_setup import initialize_slash_commands


# Ki·ªÉm tra phi√™n b·∫£n Python t·ªëi thi·ªÉu
if sys.version_info < (3, 11):
    print("Y√™u c·∫ßu Python 3.11 tr·ªü l√™n.")
    sys.exit(1)

def check_and_create_env() -> None:
    """Ki·ªÉm tra file .env v√† t·∫°o n·∫øu c·∫ßn thi·∫øt."""
    env_path = ".env"
    example_env_path = ".env.example"
    
    # N·∫øu file .env ƒë√£ t·ªìn t·∫°i, ki·ªÉm tra c√°c bi·∫øn c·∫ßn thi·∫øt
    if os.path.exists(env_path):
        load_dotenv()
        discord_token = os.getenv("KEY_DISCORD")
        # N·∫øu ƒë√£ c√≥ token h·ª£p l·ªá, kh√¥ng c·∫ßn t·∫°o l·∫°i
        if discord_token and discord_token.strip():
            return
    
    # ƒê·ªçc c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh t·ª´ file .env.example n·∫øu t·ªìn t·∫°i
    env_vars = {}
    if os.path.exists(example_env_path):
        with open(example_env_path, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#"):
                    if "=" in line:
                        key, value = line.split("=", 1)
                        env_vars[key] = value
    
    print("‚ö†Ô∏è  File .env ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ho·∫∑c thi·∫øu th√¥ng tin.")
    print("Vui l√≤ng nh·∫≠p c√°c gi√° tr·ªã sau:")
    
    # Y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p token Discord (b·∫Øt bu·ªôc)
    discord_token = ""
    while not discord_token.strip():
        discord_token = input(f"KEY_DISCORD (Discord Bot Token) [{'Nh·∫≠p token c·ªßa b·∫°n ·ªü ƒë√¢y' if not env_vars.get('KEY_DISCORD') or env_vars.get('KEY_DISCORD') == 'your_discord_bot_token_here' else env_vars.get('KEY_DISCORD')}]: ").strip()
        if not discord_token.strip():
            print("‚ùå KEY_DISCORD l√† b·∫Øt bu·ªôc. Vui l√≤ng nh·∫≠p token h·ª£p l·ªá.")
    
    env_vars["KEY_DISCORD"] = discord_token
    
    # Y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p c√°c gi√° tr·ªã t√πy ch·ªçn
    gemini_api_key = input(f"GEMINI_API_KEY (Gemini API Key - ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng d√πng ch·ª©c nƒÉng AI) [{env_vars.get('GEMINI_API_KEY', 'your_gemini_api_key_here')}]: ").strip()
    if gemini_api_key:
        env_vars["GEMINI_API_KEY"] = gemini_api_key
    elif not env_vars.get("GEMINI_API_KEY") or env_vars.get("GEMINI_API_KEY") == "your_gemini_api_key_here":
        env_vars["GEMINI_API_KEY"] = ""
    
    spotify_client_id = input(f"SPOTIFY_CLIENT_ID (Spotify Client ID - ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng d√πng ch·ª©c nƒÉng ph√°t nh·∫°c t·ª´ Spotify) [{env_vars.get('SPOTIFY_CLIENT_ID', 'your_spotify_client_id_here')}]: ").strip()
    if spotify_client_id:
        env_vars["SPOTIFY_CLIENT_ID"] = spotify_client_id
    elif not env_vars.get("SPOTIFY_CLIENT_ID") or env_vars.get("SPOTIFY_CLIENT_ID") == "your_spotify_client_id_here":
        env_vars["SPOTIFY_CLIENT_ID"] = ""
    
    spotify_client_secret = input(f"SPOTIFY_CLIENT_SECRET (Spotify Client Secret - ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng d√πng ch·ª©c nƒÉng ph√°t nh·∫°c t·ª´ Spotify) [{env_vars.get('SPOTIFY_CLIENT_SECRET', 'your_spotify_secret_id_here')}]: ").strip()
    if spotify_client_secret:
        env_vars["SPOTIFY_CLIENT_SECRET"] = spotify_client_secret
    elif not env_vars.get("SPOTIFY_CLIENT_SECRET") or env_vars.get("SPOTIFY_CLIENT_SECRET") == "your_spotify_secret_id_here":
        env_vars["SPOTIFY_CLIENT_SECRET"] = ""
    
    # Ghi c√°c gi√° tr·ªã v√†o file .env
    with open(env_path, "w", encoding="utf-8") as f:
        f.write("# Discord Bot Token - Nh·∫≠n n√≥ t·ª´ https://discord.com/developers/applications\n")
        f.write(f"KEY_DISCORD={env_vars.get('KEY_DISCORD', '')}\n\n")
        
        f.write("# Gemini API Key - Nh·∫≠n n√≥ t·ª´ https://aistudio.google.com/\n")
        f.write(f"GEMINI_API_KEY={env_vars.get('GEMINI_API_KEY', '')}\n\n")
        
        f.write("# Spotify Client - Nh·∫≠n n√≥ t·ª´ https://developer.spotify.com/dashboard\n")
        f.write(f"SPOTIFY_CLIENT_ID={env_vars.get('SPOTIFY_CLIENT_ID', '')}\n")
        f.write(f"SPOTIFY_CLIENT_SECRET={env_vars.get('SPOTIFY_CLIENT_SECRET', '')}\n\n")
    
    print(f"‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh v√†o {env_path}")
    print("Vui l√≤ng kh·ªüi ƒë·ªông l·∫°i bot!")
    sys.exit(0)

# Ki·ªÉm tra v√† t·∫°o file .env n·∫øu c·∫ßn
check_and_create_env()

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# C·∫•u h√¨nh logging v·ªõi m√†u s·∫Øc
LOG_FORMAT = "%(log_color)s[%(asctime)s] [%(levelname)s] %(name)s: %(message)s"
LOG_DATE = "%Y-%m-%d %H:%M:%S"
LOG_COLORS = {
    "DEBUG": "cyan",
    "INFO": "green",
    "WARNING": "yellow",
    "ERROR": "red",
    "CRITICAL": "bold_red",
}

# Thi·∫øt l·∫≠p handler cho terminal
stream_handler = colorlog.StreamHandler()
stream_handler.setFormatter(
    colorlog.ColoredFormatter(LOG_FORMAT, datefmt=LOG_DATE, log_colors=LOG_COLORS)
)

# C·∫•u h√¨nh root logger
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logger.addHandler(stream_handler)

# Thi·∫øt l·∫≠p intents cho bot
intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.members = True

# Kh·ªüi t·∫°o bot v·ªõi intents
bot = commands.Bot(command_prefix="", intents=intents, help_command=None)


@bot.event
async def on_ready() -> None:
    """S·ª± ki·ªán khi bot s·∫µn s√†ng ho·∫°t ƒë·ªông."""
    logger.info(f"ü§ñ Bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng: {bot.user} (ID: {bot.user.id})")
    # Kh·ªüi t·∫°o l·ªánh slash
    slash_setup = await initialize_slash_commands(bot)
    logger.info("‚úÖ ƒê√£ kh·ªüi t·∫°o slash commands")


async def setup_cogs() -> None:
    """ƒêƒÉng k√Ω c√°c cog cho bot."""
    cogs: List[commands.Cog] = [
        MusicSearch(bot),
        Help(bot),
        Assistant(bot),
        Welcome(bot),
        ImageSearch(bot),
        Moderation(bot),
        Speaking(bot),
    ]
    for cog in cogs:
        try:
            await bot.add_cog(cog)
            logger.info(f"‚úÖ ƒê√£ ƒëƒÉng k√Ω cog: {cog.__class__.__name__}")
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi ƒëƒÉng k√Ω cog {cog.__class__.__name__}: {e}")


async def main() -> None:
    """H√†m ch√≠nh ƒë·ªÉ kh·ªüi ƒë·ªông bot."""
    try:
        await setup_cogs()
        discord_token = os.getenv("KEY_DISCORD")
        if not discord_token:
            logger.error("‚ùå KEY_DISCORD kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p trong bi·∫øn m√¥i tr∆∞·ªùng")
            return
        await bot.start(discord_token)
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi kh·ªüi ƒë·ªông bot: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
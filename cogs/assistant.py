import asyncio
import logging
import os
from typing import Optional

import discord
import google.generativeai as genai
from discord.ext import commands
from dotenv import load_dotenv

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# C·∫•u h√¨nh logger
logger = logging.getLogger(__name__)

# ƒê·ªãnh nghƒ©a model AI
AI_MODEL = "gemma-3-27b-it"


def load_markdown(filename: str) -> str:
    """T·∫£i n·ªôi dung file markdown t·ª´ ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi.

    Args:
        filename: T√™n file markdown (v√≠ d·ª•: system_prompt.md).

    Returns:
        N·ªôi dung c·ªßa file markdown.
    """
    path = os.path.join(os.path.dirname(__file__), "..", filename)
    with open(path, "r", encoding="utf-8") as f:
        return f.read()


class Assistant(commands.Cog):
    """Cog x·ª≠ l√Ω c√°c l·ªánh t∆∞∆°ng t√°c v·ªõi AI s·ª≠ d·ª•ng Google Gemini."""

    def __init__(self, bot: commands.Bot) -> None:
        """Kh·ªüi t·∫°o cog Assistant.

        Args:
            bot: ƒê·ªëi t∆∞·ª£ng bot Discord.
        """
        self.bot = bot
        self.api_key = os.getenv("GEMINI_API_KEY")
        self.model = None
        self.ai_config = {
            "temperature": 0.7,
            "top_p": 0.8,
            "top_k": 40,
            "max_output_tokens": 800,
        }

        # Thi·∫øt l·∫≠p k·∫øt n·ªëi v·ªõi Google Gemini
        if self.api_key:
            genai.configure(api_key=self.api_key)
            try:
                self.model = genai.GenerativeModel(AI_MODEL)
                logger.info(f"‚úÖ ƒê√£ k·∫øt n·ªëi Gemini AI v·ªõi model {AI_MODEL}")
            except Exception as e:
                logger.error(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Gemini AI: {e}")
        else:
            logger.warning("‚ö†Ô∏è GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p. T√≠nh nƒÉng AI s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")

    @commands.command(name="ai", aliases=["chat", "ask"])
    async def ai_chat(self, ctx: commands.Context, *, message: str) -> None:
        """L·ªánh ƒë·ªÉ tr√≤ chuy·ªán v·ªõi AI Gemini.

        Args:
            ctx: Ng·ªØ c·∫£nh l·ªánh Discord.
            message: Tin nh·∫Øn ng∆∞·ªùi d√πng g·ª≠i t·ªõi AI.
        """
        logger.info(
            f"{ctx.author} g·ªçi l·ªánh !ai trong k√™nh {ctx.channel} v·ªõi tin nh·∫Øn: "
            f"'{message[:50]}{'...' if len(message) > 50 else ''}'"
        )

        if not self.model:
            await ctx.send("‚ùå AI kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh GEMINI_API_KEY.")
            return

        async with ctx.typing():
            try:
                # T·∫°o prompt v·ªõi system prompt v√† tin nh·∫Øn hi·ªán t·∫°i
                try:
                    system_prompt = load_markdown("system_prompt.md")
                    full_conversation = f"{system_prompt}\n\nUser: {message}\nAI: "
                except Exception as e:
                    logger.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i n·ªôi dung file system_prompt.md: {e}")
                    full_conversation = f"User: {message}\nAI: "

                # G·ª≠i y√™u c·∫ßu t·ªõi Gemini AI
                response = await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: self.model.generate_content(
                        full_conversation,
                        generation_config=genai.types.GenerationConfig(**self.ai_config),
                    ),
                )

                if response.text:
                    ai_response = response.text.strip()
                    logger.info(
                        f"‚úÖ AI ƒë√£ ph·∫£n h·ªìi th√†nh c√¥ng cho {ctx.author} "
                        f"(ƒë·ªô d√†i ph·∫£n h·ªìi: {len(ai_response)} k√Ω t·ª±)"
                    )

                    embed = discord.Embed(
                        title="ü§ñ Tr·ª£ l√Ω DSB AI",
                        description=ai_response,
                        color=0x00FF88,
                    )
                    embed.set_footer(text=f"ƒê∆∞·ª£c y√™u c·∫ßu b·ªüi {ctx.author.display_name}")

                    # Chia nh·ªè tin nh·∫Øn n·∫øu qu√° d√†i
                    if len(ai_response) > 2000:
                        chunks = [ai_response[i : i + 1900] for i in range(0, len(ai_response), 1900)]
                        for i, chunk in enumerate(chunks):
                            if i == 0:
                                embed.description = chunk
                                await ctx.send(embed=embed)
                            else:
                                await ctx.send(f"```{chunk}```")
                    else:
                        await ctx.send(embed=embed)
                else:
                    await ctx.send("‚ùå AI kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i.")
            except Exception as e:
                logger.error(f"‚ùå L·ªói AI chat: {str(e)}")
                error_msg = str(e).lower()
                if "404" in error_msg and "model" in error_msg:
                    await ctx.send("‚ùå Model AI kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ki·ªÉm tra API key ho·∫∑c th·ª≠ l·∫°i sau.")
                elif "quota" in error_msg or "limit" in error_msg:
                    await ctx.send("‚ùå ƒê√£ ƒë·∫°t gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau.")
                elif "api key" in error_msg:
                    await ctx.send("‚ùå API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.")
                else:
                    await ctx.send("‚ùå L·ªói AI: Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.")

    @commands.command(name="aiconfig")
    @commands.has_permissions(administrator=True)
    async def ai_config_command(self, ctx: commands.Context, setting: Optional[str] = None, value: Optional[str] = None) -> None:
        """C·∫•u h√¨nh tham s·ªë AI (ch·ªâ d√†nh cho admin).

        Args:
            ctx: Ng·ªØ c·∫£nh l·ªánh Discord.
            setting: T√™n tham s·ªë c·∫ßn c·∫•u h√¨nh (temperature, top_p, top_k, max_output_tokens).
            value: Gi√° tr·ªã m·ªõi cho tham s·ªë.
        """
        logger.info(
            f"{ctx.author} (ADMIN) g·ªçi l·ªánh !aiconfig trong k√™nh {ctx.channel} "
            f"v·ªõi setting: {setting}, value: {value}"
        )

        if not setting:
            embed = discord.Embed(title="‚öôÔ∏è C·∫•u h√¨nh AI hi·ªán t·∫°i", color=0x0099FF)
            for key, val in self.ai_config.items():
                embed.add_field(name=key, value=val, inline=True)
            await ctx.send(embed=embed)
            return

        if setting in self.ai_config and value:
            try:
                if setting in ["temperature", "top_p"]:
                    self.ai_config[setting] = float(value)
                elif setting in ["top_k", "max_output_tokens"]:
                    self.ai_config[setting] = int(value)
                logger.info(f"‚öôÔ∏è {ctx.author} ƒë√£ c·∫≠p nh·∫≠t AI config: {setting} = {self.ai_config[setting]}")
                await ctx.send(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {setting} = {self.ai_config[setting]}")
            except ValueError:
                await ctx.send("‚ùå Gi√° tr·ªã kh√¥ng h·ª£p l·ªá.")
        else:
            await ctx.send("‚ùå Tham s·ªë kh√¥ng h·ª£p l·ªá.")

    @commands.command(name="aihelp")
    async def ai_help(self, ctx: commands.Context) -> None:
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c√°c l·ªánh AI.

        Args:
            ctx: Ng·ªØ c·∫£nh l·ªánh Discord.
        """
        logger.info(f"{ctx.author} g·ªçi l·ªánh !aihelp trong k√™nh {ctx.channel}")
        embed = discord.Embed(
            title="ü§ñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng AI",
            description="DSB AI s·ª≠ d·ª•ng Google Gemini ƒë·ªÉ tr√≤ chuy·ªán th√¥ng minh.",
            color=0x00FF88,
        )
        embed.add_field(
            name="üìù L·ªánh c∆° b·∫£n",
            value=(
                "`!ai <tin nh·∫Øn>` - Chat v·ªõi AI\n"
                "`!chat <tin nh·∫Øn>` - Alias c·ªßa !ai\n"
                "`!ask <c√¢u h·ªèi>` - Alias c·ªßa !ai\n"
                "`!aihelp` - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y\n"
                "`!aistatus` - Ki·ªÉm tra tr·∫°ng th√°i AI\n"
                "`!aiconfig [setting] [value]` - C·∫•u h√¨nh AI (ch·ªâ admin)"
            ),
            inline=False,
        )
        embed.add_field(
            name="üí° V√≠ d·ª• s·ª≠ d·ª•ng",
            value=(
                "`!ai Xin ch√†o, b·∫°n c√≥ th·ªÉ l√†m g√¨?`\n"
                "`!ask Python l√† g√¨?`\n"
                "`!chat H√£y gi·∫£i th√≠ch v·ªÅ Discord bot`"
            ),
            inline=False,
        )
        embed.add_field(
            name="üîß T√≠nh nƒÉng",
            value=(
                "‚Ä¢ Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát ho·∫∑c ti·∫øng Anh\n"
                "‚Ä¢ H·ªó tr·ª£ c√¢u h·ªèi ƒëa d·∫°ng\n"
                "‚Ä¢ T·ª± ƒë·ªông chia tin nh·∫Øn d√†i\n"
                "‚Ä¢ C·∫•u h√¨nh linh ho·∫°t cho admin"
            ),
            inline=False,
        )
        await ctx.send(embed=embed)

    @commands.command(name="aistatus")
    async def ai_status(self, ctx: commands.Context) -> None:
        """Ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa AI.

        Args:
            ctx: Ng·ªØ c·∫£nh l·ªánh Discord.
        """
        logger.info(f"{ctx.author} g·ªçi l·ªánh !aistatus trong k√™nh {ctx.channel}")
        if not self.api_key:
            await ctx.send("‚ùå GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh.")
            return

        if not self.model:
            await ctx.send("‚ùå AI model ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.")
            return

        try:
            test_response = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.model.generate_content(
                    "Hello",
                    generation_config=genai.types.GenerationConfig(max_output_tokens=10),
                ),
            )
            if test_response.text:
                embed = discord.Embed(
                    title="‚úÖ AI Status",
                    description="Gemini AI ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng",
                    color=0x00FF88,
                )
                embed.add_field(name="Model", value=AI_MODEL, inline=True)
                embed.add_field(name="API Key", value="‚úÖ ƒê√£ c·∫•u h√¨nh", inline=True)
                await ctx.send(embed=embed)
            else:
                await ctx.send("‚ö†Ô∏è AI c√≥ th·ªÉ ho·∫°t ƒë·ªông nh∆∞ng kh√¥ng tr·∫£ v·ªÅ ph·∫£n h·ªìi.")
        except Exception as e:
            await ctx.send(f"‚ùå AI kh√¥ng ho·∫°t ƒë·ªông: {str(e)}")

    @ai_config_command.error
    async def ai_config_error(self, ctx: commands.Context, error: Exception) -> None:
        """X·ª≠ l√Ω l·ªói cho l·ªánh aiconfig.

        Args:
            ctx: Ng·ªØ c·∫£nh l·ªánh Discord.
            error: L·ªói ƒë∆∞·ª£c n√©m ra.
        """
        if isinstance(error, commands.MissingPermissions):
            await ctx.send("‚ùå B·∫°n c·∫ßn quy·ªÅn Administrator ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.")
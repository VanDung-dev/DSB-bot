import logging
from typing import Optional

import discord
from discord.ext import commands
from discord import app_commands
import gtts
import io
import asyncio

# C·∫•u h√¨nh logger
logger = logging.getLogger(__name__)


class Speaking(commands.Cog):
    """Cog x·ª≠ l√Ω ch·ª©c nƒÉng text-to-speech cho bot."""

    def __init__(self, bot: commands.Bot) -> None:
        """Kh·ªüi t·∫°o cog Speaking.

        Args:
            bot: ƒê·ªëi t∆∞·ª£ng bot Discord.
        """
        self.bot = bot
        self.speaking_states: dict = {}

    # Danh s√°ch ng√¥n ng·ªØ ph·ªï bi·∫øn cho autocomplete
    common_languages = {
        'en': 'English',
        'vi': 'Vietnamese',
        'fr': 'French',
        'es': 'Spanish',
        'de': 'German',
        'ja': 'Japanese',
        'ko': 'Korean',
        'zh-CN': 'Chinese (Simplified)',
        'ru': 'Russian',
    }

    def get_voice_client(self, guild: discord.Guild) -> Optional[discord.VoiceClient]:
        """Nh·∫≠n ·ª©ng d·ª•ng kh√°ch gi·ªçng n√≥i t·ª´ music cog n·∫øu c√≥."""
        # C·ªë g·∫Øng l·∫•y m√°y kh√°ch b·∫±ng gi·ªçng n√≥i t·ª´ √¢m nh·∫°c ƒë·∫ßu ti√™n
        music_cog = self.bot.get_cog('MusicSearch')
        if music_cog and guild.id in music_cog.voice_clients:
            return music_cog.voice_clients[guild.id]
        
        # D·ª± ph√≤ng c·ªßa kh√°ch h√†ng gi·ªçng n√≥i c·ªßa bot
        return discord.utils.get(self.bot.voice_clients, guild=guild)

    async def connect_to_voice(self, guild: discord.Guild, channel: discord.VoiceChannel) -> Optional[discord.VoiceClient]:
        """K·∫øt n·ªëi v·ªõi k√™nh tho·∫°i, s·ª≠ d·ª•ng music cog n·∫øu c√≥."""
        # Ki·ªÉm tra xem music cog c√≥ qu·∫£n l√Ω k·∫øt n·ªëi gi·ªçng n√≥i kh√¥ng
        music_cog = self.bot.get_cog('MusicSearch')
        if music_cog and guild.id in music_cog.voice_clients:
            return music_cog.voice_clients[guild.id]
        
        # N·∫øu kh√¥ng th√¨ k·∫øt n·ªëi b·∫±ng ph∆∞∆°ng ph√°p ri√™ng c·ªßa ch√∫ng t√¥i
        voice_client = discord.utils.get(self.bot.voice_clients, guild=guild)
        if not voice_client:
            try:
                voice_client = await channel.connect()
                # N·∫øu music cog t·ªìn t·∫°i, h√£y ƒëƒÉng k√Ω k·∫øt n·ªëi n√†y v·ªõi n√≥
                if music_cog:
                    music_cog.voice_clients[guild.id] = voice_client
            except discord.errors.ClientException:
                return None
            except Exception as e:
                logger.error(f"‚ùå L·ªói khi k·∫øt n·ªëi voice channel: {e}")
                return None
        return voice_client

    @staticmethod
    async def generate_tts_audio(text: str, lang: str = None) -> Optional[discord.File]:
        """T·∫°o audio file t·ª´ vƒÉn b·∫£n s·ª≠ d·ª•ng gTTS.

        Args:
            text: VƒÉn b·∫£n c·∫ßn chuy·ªÉn th√†nh gi·ªçng n√≥i.
            lang: M√£ ng√¥n ng·ªØ (m·∫∑c ƒë·ªãnh l·∫•y t·ª´ c·∫•u h√¨nh).

        Returns:
            File √¢m thanh d∆∞·ªõi d·∫°ng discord.File ho·∫∑c None n·∫øu c√≥ l·ªói.
        """
        try:
            # S·ª≠ d·ª•ng asyncio ƒë·ªÉ ch·∫°y gTTS trong executor tr√°nh blocking
            loop = asyncio.get_event_loop()
            # C·∫•u h√¨nh gTTS v·ªõi c√°c t√πy ch·ªçn ƒë·ªÉ tr√°nh l·ªói k·∫øt n·ªëi
            tts = gtts.gTTS(text, lang=lang, lang_check=False)
            await loop.run_in_executor(None, tts.save, "temp_tts.mp3")
            
            # M·ªü file √¢m thanh v√† tr·∫£ v·ªÅ
            with open("temp_tts.mp3", "rb") as f:
                audio_buffer = io.BytesIO(f.read())
                audio_buffer.seek(0)
            
            # X√≥a file t·∫°m th·ªùi
            import os
            os.remove("temp_tts.mp3")
            
            # Tr·∫£ v·ªÅ file √¢m thanh
            return discord.File(audio_buffer, filename="speech.mp3")
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi t·∫°o audio t·ª´ vƒÉn b·∫£n: {e}")
            return None

    @app_commands.command(name="say", description="Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i")
    @app_commands.describe(
        language="Ch·ªçn ng√¥n ng·ªØ tr∆∞·ªõc",
        text="VƒÉn b·∫£n b·∫°n mu·ªën bot n√≥i"
    )
    @app_commands.choices(language=[
        app_commands.Choice(name=name, value=code) 
        for code, name in list(common_languages.items())[:25]
    ])  # Gi·ªõi h·∫°n 25 choices do Discord API gi·ªõi h·∫°n
    @app_commands.rename(language="language", text="text")
    async def say(self, interaction: discord.Interaction, language: str, text: str) -> None:
        """Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i v√† g·ª≠i v√†o k√™nh tho·∫°i.

        Args:
            interaction: Interaction t·ª´ ng∆∞·ªùi d√πng.
            language: M√£ ng√¥n ng·ªØ ƒë∆∞·ª£c ch·ªçn.
            text: VƒÉn b·∫£n c·∫ßn chuy·ªÉn th√†nh gi·ªçng n√≥i.
        """
        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ·ªü trong voice channel kh√¥ng
        if not interaction.user.voice:
            await interaction.response.send_message("‚ùå B·∫°n c·∫ßn ·ªü trong voice channel ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.", ephemeral=True)
            return
        
        voice_channel = interaction.user.voice.channel
        guild_id = interaction.guild.id
        
        # Ki·ªÉm tra xem bot c√≥ ƒëang ph√°t nh·∫°c kh√¥ng
        music_cog = self.bot.get_cog('MusicSearch')
        if music_cog:
            # N·∫øu c√≥ h√†ng ƒë·ª£i nh·∫°c, t·ª´ ch·ªëi th·ª±c hi·ªán n√≥i
            if guild_id in music_cog.queues and music_cog.queues[guild_id]:
                await interaction.response.send_message("‚ùå Kh√¥ng th·ªÉ n√≥i khi ƒëang ph√°t nh·∫°c c√≥ h√†ng ƒë·ª£i. H√£y d√πng /stop ho·∫∑c /clear tr∆∞·ªõc.", ephemeral=True)
                return
        
        # ƒê√°nh d·∫•u tr·∫°ng th√°i n√≥i cho guild n√†y
        self.speaking_states[guild_id] = True
        
        # Tr·∫£ l·ªùi ngay l·∫≠p t·ª©c ƒë·ªÉ tr√°nh timeout
        await interaction.response.send_message(f"üîä ƒêang x·ª≠ l√Ω y√™u c·∫ßu n√≥i...", ephemeral=False)
        
        # K·∫øt n·ªëi v√†o voice channel n·∫øu ch∆∞a k·∫øt n·ªëi
        voice_client = self.get_voice_client(interaction.guild)
        if not voice_client:
            try:
                voice_client = await self.connect_to_voice(interaction.guild, voice_channel)
                if not voice_client:
                    await interaction.edit_original_response(content="‚ùå Bot ƒë√£ ·ªü trong voice channel kh√°c.")
                    del self.speaking_states[guild_id]
                    return
            except Exception as e:
                logger.error(f"‚ùå L·ªói khi k·∫øt n·ªëi voice channel: {e}")
                await interaction.edit_original_response(content="‚ùå L·ªói khi k·∫øt n·ªëi voice channel.")
                del self.speaking_states[guild_id]
                return
        
        # T·∫°o audio t·ª´ vƒÉn b·∫£n
        audio_file = await self.generate_tts_audio(text, language)
        if not audio_file:
            await interaction.edit_original_response(content="‚ùå Kh√¥ng th·ªÉ t·∫°o √¢m thanh t·ª´ vƒÉn b·∫£n. C√≥ th·ªÉ do l·ªói k·∫øt n·ªëi m·∫°ng ho·∫∑c ng√¥n ng·ªØ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
            del self.speaking_states[guild_id]
            return
        
        # Ph√°t √¢m thanh trong voice channel
        try:
            # L∆∞u t√™n file ƒë·ªÉ ph√°t
            filename = f"temp_{interaction.id}.mp3"
            
            # L∆∞u audio v√†o file t·∫°m th·ªùi
            audio_fp = audio_file.fp
            audio_fp.seek(0)
            
            with open(filename, "wb") as f:
                f.write(audio_fp.read())
            
            # Ph√°t audio
            source = discord.FFmpegPCMAudio(filename)
            
            # Ch·ªù b·∫•t k·ª≥ √¢m thanh hi·ªán ƒëang ph√°t hi·ªán ƒëang ph√°t
            while voice_client.is_playing():
                await asyncio.sleep(0.5)
                
            voice_client.play(source)
            
            # Ch·ªù ƒë·∫øn khi ph√°t xong
            while voice_client.is_playing():
                await asyncio.sleep(1)
            
            # C·∫≠p nh·∫≠t tin nh·∫Øn ƒë·ªÉ th√¥ng b√°o ƒë√£ n√≥i xong
            await interaction.edit_original_response(content=f"‚úÖ ƒê√£ n√≥i xong ({self.common_languages.get(language, language)}): {text}")
            
            # X√≥a file t·∫°m th·ªùi
            import os
            if os.path.exists(filename):
                os.remove(filename)
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi ph√°t √¢m thanh: {e}")
            await interaction.edit_original_response(content="‚ùå C√≥ l·ªói x·∫£y ra khi ph√°t √¢m thanh.")
        finally:
            # X√≥a tr·∫°ng th√°i n√≥i
            if guild_id in self.speaking_states:
                del self.speaking_states[guild_id]

    @commands.command(name="say", aliases=["speak"])
    async def say_legacy(self, ctx: commands.Context, *, text: str) -> None:
        """Phi√™n b·∫£n l·ªánh say d√†nh cho prefix commands.

        Args:
            ctx: Ng·ªØ c·∫£nh l·ªánh.
            text: VƒÉn b·∫£n c·∫ßn chuy·ªÉn th√†nh gi·ªçng n√≥i.
        """
        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ·ªü trong voice channel kh√¥ng
        if not ctx.author.voice:
            await ctx.send("‚ùå B·∫°n c·∫ßn ·ªü trong voice channel ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.")
            return
        
        voice_channel = ctx.author.voice.channel
        guild_id = ctx.guild.id
        
        # Ki·ªÉm tra xem bot c√≥ ƒëang ph√°t nh·∫°c kh√¥ng
        music_cog = self.bot.get_cog('MusicSearch')
        if music_cog:
            # N·∫øu c√≥ h√†ng ƒë·ª£i nh·∫°c, t·ª´ ch·ªëi th·ª±c hi·ªán n√≥i
            if guild_id in music_cog.queues and music_cog.queues[guild_id]:
                await ctx.send("‚ùå Kh√¥ng th·ªÉ n√≥i khi ƒëang ph√°t nh·∫°c c√≥ h√†ng ƒë·ª£i. H√£y d√πng !stop ho·∫∑c !clear tr∆∞·ªõc.")
                return
        
        # ƒê√°nh d·∫•u tr·∫°ng th√°i n√≥i cho guild n√†y
        self.speaking_states[guild_id] = True
        
        # G·ª≠i th√¥ng b√°o ƒëang x·ª≠ l√Ω
        processing_msg = await ctx.send(f"üîä ƒêang x·ª≠ l√Ω y√™u c·∫ßu n√≥i...")
        
        # K·∫øt n·ªëi v√†o voice channel n·∫øu ch∆∞a k·∫øt n·ªëi
        voice_client = self.get_voice_client(ctx.guild)
        if not voice_client:
            try:
                voice_client = await self.connect_to_voice(ctx.guild, voice_channel)
                if not voice_client:
                    await processing_msg.edit(content="‚ùå Bot ƒë√£ ·ªü trong voice channel kh√°c.")
                    del self.speaking_states[guild_id]
                    return
            except Exception as e:
                logger.error(f"‚ùå L·ªói khi k·∫øt n·ªëi voice channel: {e}")
                await processing_msg.edit(content="‚ùå L·ªói khi k·∫øt n·ªëi voice channel.")
                del self.speaking_states[guild_id]
                return
        
        # T·∫°o audio t·ª´ vƒÉn b·∫£n v·ªõi ng√¥n ng·ªØ m·∫∑c ƒë·ªãnh
        audio_file = await self.generate_tts_audio(text)
        if not audio_file:
            await processing_msg.edit(content="‚ùå Kh√¥ng th·ªÉ t·∫°o √¢m thanh t·ª´ vƒÉn b·∫£n. C√≥ th·ªÉ do l·ªói k·∫øt n·ªëi m·∫°ng ho·∫∑c ng√¥n ng·ªØ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
            del self.speaking_states[guild_id]
            return
        
        # Ph√°t √¢m thanh trong voice channel
        try:
            # L∆∞u t√™n file ƒë·ªÉ ph√°t
            filename = f"temp_{ctx.message.id}.mp3"
            
            # L∆∞u audio v√†o file t·∫°m th·ªùi
            audio_fp = audio_file.fp
            audio_fp.seek(0)
            
            with open(filename, "wb") as f:
                f.write(audio_fp.read())
            
            # Ph√°t audio
            source = discord.FFmpegPCMAudio(filename)
            
            # Ch·ªù b·∫•t k·ª≥ √¢m thanh hi·ªán ƒëang ph√°t hi·ªán ƒëang ph√°t
            while voice_client.is_playing():
                await asyncio.sleep(0.5)
                
            voice_client.play(source)
            
            # Ch·ªù ƒë·∫øn khi ph√°t xong
            while voice_client.is_playing():
                await asyncio.sleep(1)
            
            # C·∫≠p nh·∫≠t tin nh·∫Øn ƒë·ªÉ th√¥ng b√°o ƒë√£ n√≥i xong
            await processing_msg.edit(content=f"‚úÖ ƒê√£ n√≥i xong: {text}")
            
            # X√≥a file t·∫°m th·ªùi
            import os
            if os.path.exists(filename):
                os.remove(filename)
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi ph√°t √¢m thanh: {e}")
            await processing_msg.edit(content="‚ùå C√≥ l·ªói x·∫£y ra khi ph√°t √¢m thanh.")
        finally:
            # X√≥a tr·∫°ng th√°i n√≥i
            if guild_id in self.speaking_states:
                del self.speaking_states[guild_id]


async def setup(bot: commands.Bot) -> None:
    """Thi·∫øt l·∫≠p cog Speaking."""
    await bot.add_cog(Speaking(bot))
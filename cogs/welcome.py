import logging
from typing import Optional

import discord
from discord.ext import commands

# C·∫•u h√¨nh logger
logger = logging.getLogger(__name__)


class Welcome(commands.Cog):
    """Cog x·ª≠ l√Ω tin nh·∫Øn ch√†o m·ª´ng v√† t·∫°m bi·ªát th√†nh vi√™n."""

    def __init__(self, bot: commands.Bot) -> None:
        """Kh·ªüi t·∫°o cog Welcome.

        Args:
            bot: ƒê·ªëi t∆∞·ª£ng bot Discord.
        """
        self.bot = bot

    @staticmethod
    def _find_suitable_channel(guild: discord.Guild, keywords: list) -> Optional[discord.TextChannel]:
        """T√¨m channel ph√π h·ª£p ƒë·ªÉ g·ª≠i tin nh·∫Øn.

        Args:
            guild: Server Discord.
            keywords: Danh s√°ch t·ª´ kh√≥a ƒë·ªÉ ∆∞u ti√™n t√¨m channel (v√≠ d·ª•: ['general', 'welcome']).

        Returns:
            Channel vƒÉn b·∫£n ph√π h·ª£p ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y.
        """
        for channel in guild.text_channels:
            if any(keyword in channel.name.lower() for keyword in keywords):
                if channel.permissions_for(guild.me).send_messages:
                    return channel
        for channel in guild.text_channels:
            if channel.permissions_for(guild.me).send_messages:
                return channel
        return None

    @commands.Cog.listener()
    async def on_member_join(self, member: discord.Member) -> None:
        """S·ª± ki·ªán khi th√†nh vi√™n m·ªõi tham gia server.

        Args:
            member: Th√†nh vi√™n v·ª´a tham gia.
        """
        logger.info(
            f"üÜï Th√†nh vi√™n m·ªõi {member.name} (ID: {member.id}) ƒë√£ tham gia server {member.guild.name}"
        )
        channel = self._find_suitable_channel(
            member.guild, ["general", "welcome", "ch√†o-m·ª´ng", "lobby"]
        )
        if not channel:
            logger.warning(
                f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y channel n√†o ƒë·ªÉ g·ª≠i tin nh·∫Øn ch√†o m·ª´ng trong {member.guild.name}"
            )
            return

        embed = discord.Embed(
            title="üéâ Ch√†o m·ª´ng th√†nh vi√™n m·ªõi!",
            description=f"Xin ch√†o {member.mention}! Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi **{member.guild.name}**! üéä",
            color=0x00FF88,
        )
        embed.add_field(
            name="ü§ñ V·ªÅ DSB Bot",
            value="T√¥i l√† DSB Bot, c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ Ph√°t nh·∫°c v·ªõi `!play`\n‚Ä¢ Chat AI v·ªõi `!ai`\n‚Ä¢ Xem h∆∞·ªõng d·∫´n v·ªõi `!help`",
            inline=False,
        )
        embed.add_field(
            name="üìã B·∫Øt ƒë·∫ßu",
            value="H√£y g√µ `!help` ƒë·ªÉ xem t·∫•t c·∫£ l·ªánh c√≥ s·∫µn!",
            inline=False,
        )
        embed.set_thumbnail(url=member.avatar.url if member.avatar else member.default_avatar.url)
        embed.set_footer(text=f"Th√†nh vi√™n th·ª© {member.guild.member_count} ‚Ä¢ {member.guild.name}")
        embed.timestamp = discord.utils.utcnow()

        try:
            await channel.send(embed=embed)
            logger.info(f"‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn ch√†o m·ª´ng cho {member.name} trong {channel.name}")
        except discord.Forbidden:
            logger.warning(f"‚ö†Ô∏è Kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn trong {channel.name}")
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi g·ª≠i tin nh·∫Øn ch√†o m·ª´ng: {e}")

    @commands.Cog.listener()
    async def on_member_remove(self, member: discord.Member) -> None:
        """S·ª± ki·ªán khi th√†nh vi√™n r·ªùi kh·ªèi server.

        Args:
            member: Th√†nh vi√™n v·ª´a r·ªùi ƒëi.
        """
        logger.info(
            f"üëã Th√†nh vi√™n {member.name} (ID: {member.id}) ƒë√£ r·ªùi kh·ªèi server {member.guild.name}"
        )
        channel = self._find_suitable_channel(
            member.guild, ["general", "goodbye", "t·∫°m-bi·ªát", "lobby", "log"]
        )
        if not channel:
            logger.warning(
                f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y channel n√†o ƒë·ªÉ g·ª≠i tin nh·∫Øn t·∫°m bi·ªát trong {member.guild.name}"
            )
            return

        embed = discord.Embed(
            title="üëã T·∫°m bi·ªát!",
            description=f"**{member.name}** ƒë√£ r·ªùi kh·ªèi server. Ch√∫c b·∫°n may m·∫Øn! üçÄ",
            color=0xFF6B6B,
        )
        embed.set_thumbnail(url=member.avatar.url if member.avatar else member.default_avatar.url)
        embed.set_footer(text=f"C√≤n l·∫°i {member.guild.member_count} th√†nh vi√™n ‚Ä¢ {member.guild.name}")
        embed.timestamp = discord.utils.utcnow()

        try:
            await channel.send(embed=embed)
            logger.info(f"‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn t·∫°m bi·ªát cho {member.name} trong {channel.name}")
        except discord.Forbidden:
            logger.warning(f"‚ö†Ô∏è Kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn trong {channel.name}")
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi g·ª≠i tin nh·∫Øn t·∫°m bi·ªát: {e}")

    @commands.command(name="setwelcome")
    @commands.has_permissions(administrator=True)
    async def set_welcome_channel(
        self, ctx: commands.Context, channel: Optional[discord.TextChannel] = None
    ) -> None:
        """Thi·∫øt l·∫≠p channel cho tin nh·∫Øn ch√†o m·ª´ng (ch·ªâ admin).

        Args:
            ctx: Ng·ªØ c·∫£nh l·ªánh Discord.
            channel: Channel vƒÉn b·∫£n ƒë·ªÉ thi·∫øt l·∫≠p (m·∫∑c ƒë·ªãnh l√† channel hi·ªán t·∫°i).
        """
        logger.info(f"{ctx.author} (ADMIN) g·ªçi l·ªánh !setwelcome trong k√™nh {ctx.channel}")
        channel = channel or ctx.channel
        if not channel.permissions_for(ctx.guild.me).send_messages:
            await ctx.send(f"‚ùå Bot kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn trong {channel.mention}")
            return

        embed = discord.Embed(
            title="‚úÖ ƒê√£ thi·∫øt l·∫≠p channel ch√†o m·ª´ng",
            description=f"Channel {channel.mention} s·∫Ω ƒë∆∞·ª£c ∆∞u ti√™n cho tin nh·∫Øn ch√†o m·ª´ng.",
            color=0x00FF88,
        )
        embed.add_field(
            name="üí° L∆∞u √Ω",
            value="Bot s·∫Ω t·ª± ƒë·ªông t√¨m channel ph√π h·ª£p n·∫øu kh√¥ng t√¨m th·∫•y channel ƒë∆∞·ª£c thi·∫øt l·∫≠p.",
            inline=False,
        )
        await ctx.send(embed=embed)
        logger.info(f"‚úÖ {ctx.author} ƒë√£ thi·∫øt l·∫≠p {channel.name} l√†m welcome channel")

    @commands.command(name="testwelcome")
    @commands.has_permissions(administrator=True)
    async def test_welcome(self, ctx: commands.Context, member: Optional[discord.Member] = None) -> None:
        """Ki·ªÉm tra tin nh·∫Øn ch√†o m·ª´ng (ch·ªâ admin).

        Args:
            ctx: Ng·ªØ c·∫£nh l·ªánh Discord.
            member: Th√†nh vi√™n ƒë·ªÉ ki·ªÉm tra (m·∫∑c ƒë·ªãnh l√† ng∆∞·ªùi g·ªçi l·ªánh).
        """
        logger.info(f"{ctx.author} (ADMIN) g·ªçi l·ªánh !testwelcome trong k√™nh {ctx.channel}")
        member = member or ctx.author
        await self.on_member_join(member)
        await ctx.send(f"‚úÖ ƒê√£ test tin nh·∫Øn ch√†o m·ª´ng cho {member.mention}")

    @set_welcome_channel.error
    @test_welcome.error
    async def welcome_command_error(self, ctx: commands.Context, error: Exception) -> None:
        """X·ª≠ l√Ω l·ªói cho c√°c l·ªánh ch√†o m·ª´ng.

        Args:
            ctx: Ng·ªØ c·∫£nh l·ªánh Discord.
            error: L·ªói ƒë∆∞·ª£c n√©m ra.
        """
        if isinstance(error, commands.MissingPermissions):
            await ctx.send("‚ùå B·∫°n c·∫ßn quy·ªÅn Administrator ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.")
            logger.warning(f"‚ö†Ô∏è {ctx.author} c·ªë g·∫Øng d√πng l·ªánh admin m√† kh√¥ng c√≥ quy·ªÅn")